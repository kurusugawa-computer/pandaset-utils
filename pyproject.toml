[tool.poetry]
name = "kurusugawa-cli"
version = "0.1.0"
description = "'pandaset'データセットに関するスクリプト"
authors = ["Kurusugawa Computer Inc."]
packages = [
    { include = "pandasetutils" }
]
readme="README.md"
repository="https://github.com/kurusugawa-computer/pandasetutils"
classifiers = [
        "Development Status :: 4 - Beta",
        "Intended Audience :: Developers",
        "Environment :: Console",
        "Topic :: Utilities",
        "Operating System :: OS Independent",
]

[tool.poetry.dependencies]
python = "^3.11"
pandas = "*"

[tool.poetry.group.test.dependencies]
pytest = "^7"

[tool.poetry.group.formatter.dependencies]
black = "^23"

[tool.poetry.group.linter.dependencies]
# ruffのバージョンの上限を指定する理由: 
# ruffは0.0.260から"line-width"の計算を"character count"から"unicode width"に変更した。
# black 23.3(通常版)は"line-width"を"character count"で計算している。
# ruffとblackで"line-with"の計算が異なってしまうので、ruffのバージョンの上限を指定した。
# https://qiita.com/yuji38kwmt/items/04208d2d2cafe1218287
ruff = "<0.0.260"
mypy = "^1"
pylint = "^2"

[tool.poetry.group.typeshed.dependencies]
types-requests = "*"

[tool.black]
line-length = 150

[tool.mypy]
# スタブが無いパッケージのエラーは無視させる.サードパーティのライブラリに型情報がないケースもあるため
ignore_missing_imports = true
# 型ヒントが付いていない関数もチェックする
check_untyped_defs = true

[tool.ruff]
target-version = "py311"

ignore = [
    "RUF001", # 全角記号など`ambiguous unicode character`も使いたいため
    "RUF002",# 全角記号など`ambiguous unicode character`も使いたいため
    "RUF003",# 全角記号など`ambiguous unicode character`も使いたいため
    "PLC1901", # compare-to-empty-string : `if a == "`のように空文字列で直接比較したいときがあるため
    "PLR2004", # magic-value-comparison: listのサイズで判定するときがよくあるため
    "ANN101", # missing-type-self: 引数selfには型ヒントは付けていないため
    "ANN102", # missing-type-cls: 引数clsには型ヒントは付けていないため
    "ERA", # : 役立つこともあるが、コメントアウトしていないコードも警告されるので無視する

    # 以下のルールは、各プロジェクトのコードのスタイルに合わせて有効にすること
    "RSE", # flake8-raise
    "D", # pydocstyle, Docstringを中途半端にしか書いていないので、除外する
    "C90", # mccabe 
    "T20", # flake8-print
    "SLF", #  flake8-self
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "TRY", # tryceratops 
    "COM", # flake8-commas 
    "S", # flake8-bandit
    "EM",#flake8-errmsg
    "EXE", # flake8-executable
    "ICN", # flake8-import-conventions
    "RET",#flake8-return
    "SIM",#flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", #pathlibを使わないコードが多いので、除外する
    "ISC", #flake8-implicit-str-concat
    "N", # pep8-naming
    "PT", # flake8-pytest-style
]

line-length = 120
select = [
    "ALL"
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.pylint]
max-args = 10


[tool.pylint]
disable = [
    "redefined-builtin", # ruffのA001でチェックしているため
    "logging-fstring-interpolation",
# ===== May not modify =====
    "fixme", # TODO remains
    "line-too-long", # [flake8]
    "too-few-public-methods",
    "too-many-public-methods",
    "too-many-arguments",
    "too-many-locals",
    "too-many-instance-attributes",
    "arguments-differ", # Parameters differ from overridden 'define_option' method
    "useless-super-delegation", # Useless super delegation in method 'clipped'
    "global-statement", # Using the global statement
    "suppressed-message", # Suppressed 'unused-import'
    "locally-disabled", # Locally disabling unused-import

# ===== False Detection in pylint =====
    "invalid-name", # Argument name "x" doesn't conform to snake_case naming style
    "no-member", # Module 'numpy' has no 'float64' member
# no-name-in-module, # No name 'python' in module 'tensorflow'
# not-callable, # multiprocessing.current_process is not callable

# ===== Consider wheather modify =====
    "missing-docstring",
    "ungrouped-imports",  
    "invalid-unary-operand-type", # bad operand type for unary -: NoneType
    "len-as-condition", # Do not use `len(SEQUENCE)` to determine if a sequence is empty
    "no-else-return", # Unnecessary "else" after "return"
    "too-many-branches", # Used when a function or method has too many branches, making it hard to follow
    "cyclic-import",
    "similarities", # Similar lines in 2 files

# ===== Must modify  =====
    "empty-docstring",

# ===== Custom =====
    "protected-access",
    "logging-format-interpolation",
    "import-error", # ディレクトリ構成がpython的に正しくないので、importが正しく認識されないため
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


